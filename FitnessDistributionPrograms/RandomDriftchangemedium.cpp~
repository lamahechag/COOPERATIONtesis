// Proceso de Moran
#include <iostream> 
#include<string>
#include<fstream>
#include<iomanip>
#include <ctime> 
#include <cstdlib> 
#include<cmath>
double round( double k );
using namespace std; 
int main () 
{
  double randomr, randomk, r1, p1, r2, p2, r, p;
  int  x, randomr1, randomk1, n=1000, i=330, deltat=500;
 // Parametros de la matriz
  double R=1, S=0.1, T=0.5, P=0, X, f1, f0,Pc,Pd, Fc, Fd, w=1, pro, pc, pd, re, aux;
  // 0 defect, 1 cooperate: los valores de las componentes de los vectores
  double A[n], A1[n], B[n];
  //randomr = (rand()%99)+1;
  //randomk = (rand()%99)+1;
srand((unsigned)time(0));
for(int se=0;se<n;se++)
  {
    if(se<i) A1[se]=1;	
    else A1[se]=0;    
  }
 for(int se=0;se<n;se++)//acignasion de la distribucion fenotipica(fitness) inicial para los alelos 1 y 0 
  {
   if(A1[se]==1){  randomk = (rand()%1001);
   randomr=6*randomk/1000;
   p1=10-sinh(-3)+sinh(0.9*(randomr-3));    B[se]=round(p1);	}
   else{ randomk = (rand()%1001);  randomr=6*randomk/1000; 
     p2=-sinh(-3)+sinh(randomr-3);
     B[se]=round(p2);}    
  }

  x=i;
  int t=0;
srand((unsigned)time(0));
 while(x>0 && x<n)
{
x=0;
  for(int a=0;a<n;a++)
    { 
     if(A1[a]==1) x=x+1;
    }
  X=double(x)/double(n);
 cout<<t<<" "<<X<<" "<<1-X<<endl;
 double f0=0, f1=0;
 double F1[x], F0[x-n];//se  crea otro vector de fitness para cada elelo, para escoger cual fitness se reproduce.
 int F11=0, F00=0; 
for(int se=0;se<n;se++)
  {
    if(A1[se]==1){ f1=f1+B[se]; F1[F11]=B[se]; F11++;}
    else{ f0=f0+B[se]; F0[F00]=B[se]; F00++;}    
  }
 if(t==30000){break;}  
 t++;
 pc=f1/(f1+f0);
 randomk = (rand()%1001);

 randomr=randomk/1000;
 if(randomr < pc){re=1;  randomk1 = (rand()%n);
 A1[randomk1]=re;
 randomk = (rand()%1001);
   randomr=6*randomk/1000;
   p1=10-sinh(-3)+sinh((randomr-3)*0.9);     
 B[randomk1]=round(p1);}
 else{ re=0;  randomk1 = (rand()%n);
 A1[randomk1]=re;
 randomk = (rand()%1001);  randomr=6*randomk/1000; 
     p2=-sinh(-3)+sinh(randomr-3);
    
B[randomk1]= round(p2);} 
}
 
return 0;
}
double round( double k )
{
const double sd = 10; //for accuracy to 3 decimal places
return int(k*sd + (k<0? -0.5 : 0.5))/sd;
}
