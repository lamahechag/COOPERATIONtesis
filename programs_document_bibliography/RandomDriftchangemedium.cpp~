// Proceso de Moran
#include <iostream> 
#include<string>
#include<fstream>
#include<iomanip>
#include <ctime> 
#include <cstdlib> 
#include<cmath>
using namespace std; 
int main () 
{
  double randomr, randomk, r1=1.8, p1=1, r2=1.1, p2=1.5, r=r1, p=p1;
  int  randomr1, randomk1, n=1000, i=10, deltat=700;
 // Parametros de la matriz
  double R=1, S=0.1, T=0.5, P=0, x,X,Pc,Pd, Fc, Fd, w=1, pro, pc, pd, re, aux;
  // 0 defect, 1 cooperate: los valores de las componentes de los vectores
  double A[n], A1[n], B[100],B1[100];
  //randomr = (rand()%99)+1;
  //randomk = (rand()%99)+1;
srand((unsigned)time(0));
for(int se=0;se<n;se++)
  {
    if(se<i) A1[se]=1;	
    else A1[se]=0;    
  }
  x=i;
  int t=0;
 while(x>0 && x<n)
{
x=0;
  for(int a=0;a<n;a++)
    { 
     if(A1[a]==1) x=x+1;
    }
   X=x/n;
 cout<<t<<" "<<X<<" "<<1-X<<endl;
 if(t==30000){break;}
 if(t!=0 && t%deltat==0){ if(r==r1){r=r2; p=p2;} else{r=r1; p=p1;} }
 
 Pc=r*x; Pd=p*(double(n)-x);//  reproduction with fitness r for cooperate 
 pc=Pc/(Pc+Pd);  
 t++;
 //pro=Pc/(Pc+Pd);
 //pro=(Pc-Pd)/(2*10)+0.5;//pro=1 - exp((Pd-Pc));//pro= 1/(1+exp(-(Pc-Pd)));
 randomk = (rand()%1001);
 randomr1 = (rand()%n);
 randomr=randomk/1000;
 if(randomr < pc)re=1;//A1[randomr1]=1;
 else re=0;//A1[randomr1]=0; 
 A1[randomr1]=re;
 //cout<<randomr<<" "<<pc<<endl;
 }
 //cout<<x<<endl; 
return 0;
}
